apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

// Load environment-specific .env file based on build variant
def getEnvFile() {
    def envFile = ".env"
    if (project.hasProperty('ENVFILE')) {
        envFile = project.getProperty('ENVFILE')
    }
    return envFile
}

// Apply react-native-config with the correct env file
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
project.ext.envConfigFiles = [getEnvFile()]

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

// Load signing config
def signingProperties = new Properties()
def signingPropertiesFile = rootProject.file("app/signing.properties")
if (signingPropertiesFile.exists()) {
    signingProperties.load(new FileInputStream(signingPropertiesFile))
    println "✅ Loaded signing properties from: ${signingPropertiesFile.absolutePath}"
} else {
    println "⚠️  Signing properties file not found: ${signingPropertiesFile.absolutePath}"
    println "   Using default debug signing for all builds"
}

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    debuggableVariants = ["devDebug", "stgDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

apply from: new File(["node", "--print", "require.resolve('@sentry/react-native/package.json')"].execute().text.trim(), "../sentry.gradle")
android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.macromeals.app'
    flavorDimensions "environment"
    
    defaultConfig {
        applicationId 'com.macromeals.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 23
        versionName "1.0.6"
        
        // Enable multidex
        multiDexEnabled true
        
        // Enable resource optimization
        resConfigs "en"
        vectorDrawables.useSupportLibrary = true
    }
    
    productFlavors {
        dev {
            // applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            resValue "string", "app_name", "Macro Meals [DEV]"
            buildConfigField "String", "ENVIRONMENT", "\"development\""
            // Set environment file for react-native-config
            project.env.each { k, v ->
                buildConfigField "String", k, "\"$v\""
            }
        }
        stg {
            dimension "environment"
            // applicationIdSuffix ".stg"
            versionNameSuffix "-stg"
            resValue "string", "app_name", "Macro Meals [STG]"
            buildConfigField "String", "ENVIRONMENT", "\"staging\""
            // Set environment file for react-native-config
            project.env.each { k, v ->
                buildConfigField "String", k, "\"$v\""
            }
        }
        prod {
            dimension "environment"
            resValue "string", "app_name", "Macro Meals"
            buildConfigField "String", "ENVIRONMENT", "\"production\""
            // Set environment file for react-native-config
            project.env.each { k, v ->
                buildConfigField "String", k, "\"$v\""
            }
        }
    }

    // dexOptions removed as it's obsolete in Android Gradle Plugin 8.0+
    // The AndroidGradle plugin optimizes dexing automatically

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('upload-key.keystore')
            storePassword signingProperties.getProperty('UPLOAD_STORE_PASSWORD', '')
            keyAlias signingProperties.getProperty('UPLOAD_KEY_ALIAS', 'upload')
            keyPassword signingProperties.getProperty('UPLOAD_KEY_PASSWORD', '')
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
        }
    }
    
    // Override signing config for staging builds to use debug signing
    android.applicationVariants.all { variant ->
        if (variant.name.contains('Stg') && variant.name.contains('Release')) {
            variant.buildType.signingConfig = signingConfigs.debug
            println "🔧 Using debug signing for staging build: ${variant.name}"
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/*.kotlin_module']
        }
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Task to print environment variables for debugging
task printEnvVars {
    doLast {
        println "Environment variables for build:"
        project.env.each { k, v ->
            println "  $k = $v"
        }
    }
}

// Task to verify environment variables in the final build
task verifyBuildEnv {
    doLast {
        println "=== BUILD ENVIRONMENT VERIFICATION ==="
        println "Build variant: ${android.defaultConfig.applicationId}"
        println "Environment file: ${getEnvFile()}"
        println "Environment variables:"
        project.env.each { k, v ->
            println "  $k = $v"
        }
        println "=== END VERIFICATION ==="
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation platform('com.google.firebase:firebase-bom:32.2.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-messaging'

    implementation project(':react-native-config')

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    implementation "androidx.camera:camera-extensions:1.3.1"
    implementation "androidx.camera:camera-camera2:1.3.1"
    implementation "androidx.work:work-runtime-ktx:2.9.0"
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

// Fix Crashlytics task dependencies for multi-flavor builds
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def uploadTask = tasks.findByName("uploadCrashlyticsMappingFile${variantName}")
    
    // Find all Google Services process tasks that might be related
    def processTasks = []
    tasks.each { task ->
        if (task.name.startsWith("process") && task.name.endsWith("GoogleServices")) {
            processTasks.add(task)
        }
    }
    
    if (uploadTask && processTasks.size() > 0) {
        uploadTask.dependsOn processTasks
    }
}

// Disable Crashlytics mapping file upload for development builds to avoid dependency issues
android.applicationVariants.all { variant ->
    if (variant.buildType.name == 'debug' || variant.flavorName == 'dev') {
        def uploadTask = tasks.findByName("uploadCrashlyticsMappingFile${variant.name.capitalize()}")
        if (uploadTask) {
            uploadTask.enabled = false
        }
    }
}

// Additional fix for specific task dependencies
tasks.whenTaskAdded { task ->
    if (task.name.startsWith("uploadCrashlyticsMappingFile")) {
        tasks.each { otherTask ->
            if (otherTask.name.startsWith("process") && otherTask.name.endsWith("GoogleServices")) {
                task.dependsOn otherTask
            }
        }
    }
}

apply plugin: "io.sentry.android.gradle"
sentry {
    // Enables or disables the automatic configuration of Native Symbols
    // for Sentry. This executes sentry-cli automatically so
    // you don't need to do it manually.
    // Default is disabled.
    uploadNativeSymbols = true
    // Enables or disables the automatic upload of the app's native source code to Sentry.
    // This executes sentry-cli with the --include-sources param automatically so
    // you don't need to do it manually.
    // This option has an effect only when [uploadNativeSymbols] is enabled.
    // Default is disabled.
    includeNativeSources = true
    // `@sentry/react-native` ships with compatible `sentry-android`
    // This option would install the latest version that ships with the SDK or SAGP (Sentry Android Gradle Plugin)
    // which might be incompatible with the React Native SDK
    // Enable auto-installation of Sentry components (sentry-android SDK and okhttp, timber and fragment integrations).
    // Default is enabled.
    autoInstallation {
      enabled = false
    }
}